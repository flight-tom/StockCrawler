using System;
using DOWILL.DBAccess;
using DOWILL.Hex;
using StockCrawler.Core;
using StockCrawler.Web.Security;

namespace StockCrawler.UnitTest
{
    class UnitTestRobotDataBuilder : UnitTestBase
    {
        private UnitTestRobotDataBuilder() { }
        /// <summary>
        /// Create a unit testing robot.
        /// Robot features:
        /// 1. Has 2 arms:   1st arm is selling arm, which bind 2 filters that extract only stocks's current price above than average price in past 20 days.
        ///                  2nd arm is buying arm, which bind only 1 filter that would include all available stocks in database.
        /// 2. All arms are using 1 as their threshold values.
        /// </summary>
        /// <param name="robotID">Return the robot ID</param>
        /// <param name="allStockFilterID">Return the all stock filter ID</param>
        /// <param name="filterID">return the filter ID of current price above than average price in past 20 days</param>
        public static void BuildDummyRobot(out int robotID, out int allStockFilterID, out int filterID)
        {
            /* 
            * Robot features:
            * 1. Has 2 arms:   1st arm is selling arm, which bind 2 filters that extract only stocks's current price above than average price in past 20 days.
            *                  2nd arm is buying arm, which bind only 1 filter that would include all available stocks in database.
            * 2. All arms are using 1 as their threshold values.
            */
            
            #region selector
            int discard = 0;
            _coreDb.ExecuteCommand.CommandText = string.Format("INSERT INTO Selector(SelectorName, Description, Creator, Formula, CompileBin) VALUES({0}, {1}, {2}, {3}, {4})",
                OleDbStrHelper.getParamStr("selector1"),
                OleDbStrHelper.getParamStr("For unit test only"),
                OleDbStrHelper.getParamStr(SessionManager.MemberID),
                OleDbStrHelper.getParamStr("StockPriceByDay({STOCK}.NO, 0) > StockAvgPriceByDay({STOCK}.NO, 20)"),
                OleDbStrHelper.getParamStr(HexEncoding.GetBytes("4D5A90000300000004000000FFFF0000B800000000000000400000000000000000000000000000000000000000000000000000000000000000000000800000000E1FBA0E00B409CD21B8014CCD21546869732070726F6772616D2063616E6E6F742062652072756E20696E20444F53206D6F64652E0D0D0A2400000000000000504500004C01030053527B4D0000000000000000E00002210B010800000600000006000000000000CE250000002000000040000000004000002000000002000004000000000000000400000000000000008000000002000000000000030040850000100000100000000010000010000000000000100000000000000000000000742500005700000000400000D002000000000000000000000000000000000000006000000C00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000080000000000000000000000082000004800000000000000000000002E74657874000000D4050000002000000006000000020000000000000000000000000000200000602E72737263000000D0020000004000000004000000080000000000000000000000000000400000402E72656C6F6300000C0000000060000000020000000C00000000000000000000000000004000004200000000000000000000000000000000B0250000000000004800000002000500E4200000900400000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000133007007E00000001000011032D0B7201000070730300000A7A730400000A188D010000010A06160302169A75070000016F0500000A6F0600000AA20617168C09000001A2066F0700000AA50B000001730800000A188D010000010B07160302169A75070000016F0500000A6F0600000AA207171F148C09000001A2076F0700000AA50B000001FE022A1E02280900000A2A000042534A4201000100000000000C00000076322E302E35303732370000000005006C0000005C010000237E0000C8010000C801000023537472696E67730000000090030000880000002355530018040000100000002347554944000000280400006800000023426C6F620000000000000002000001471502000900000000FA013300160000010000000C000000020000000200000002000000090000000200000001000000010000000200000000000A000100000000000600600059000A008B0074000600D500B5000600F500B5000600350159000A0061014A010600710159000A00780174000600920159000A0098014A010600AB0159000A00B2014A0100000000010000000000010001000100100022002E0005000100010050200000000096009E0013000100DA20000000008618AF001B000300000001002701000002002C011900AF001F002100AF001B002900AF0024003100AF001B0011007E01290041008B012F005100A10133006100AF001B000900AF001B002E000B0040002E001300490039000480000000000000000000000000000000001301000002000000000000000000000001005000000000000100000000000000000000000A0067000000000000000000003C4D6F64756C653E00323031312D30332D31322D31392D30302D33342E444C4C0050726F53656C6563746F7200444F57494C4C49524F4E4D414E2E476574526573756C74427579504F4354657374006D73636F726C69620053797374656D004F626A6563740049524F4E4D414E2E436F72650049524F4E4D414E2E436F72652E53656C6563746F7273004D656D62657253746F636B4D616E6167657200476F745175616C696679526573756C74002E63746F720053797374656D2E52756E74696D652E436F6D70696C6572536572766963657300436F6D70696C6174696F6E52656C61786174696F6E734174747269627574650052756E74696D65436F6D7061746962696C69747941747472696275746500323031312D30332D31322D31392D30302D333400617267730073746F636B4D6772004170706C69636174696F6E457863657074696F6E0049524F4E4D414E2E436F72652E46756E6374696F6E730053746F636B5072696365427944617900537472696E670053746F636B0047657453746F636B496E666F006765745F4E4F00496E7433320046756E63426173650043616C63756C61746500446F75626C650053746F636B41766750726963654279446179000000000080854E006F00200061007600610069006C00610062006C00650020006D0065006D006200650072002000610073007300690067006E0065006400200066006F0072002000650073007400610062006C0069007300680069006E0067002000760061006C00690064002000730074006F0063006B0020006D0061006E0061006700650072002E00008215D20C48D4774EB8EB402D74CEAB460008B77A5C561934E08908DCE294CC33C2E22B070002021D1C1209032000010420010108042001010E05200112210E0320000E0520011C1D1C0607021D1C1D1C0801000800000000001E01000100540216577261704E6F6E457863657074696F6E5468726F7773019C2500000000000000000000BE250000002000000000000000000000000000000000000000000000B02500000000000000000000000000000000000000005F436F72446C6C4D61696E006D73636F7265652E646C6C0000000000FF2500204000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100100000001800008000000000000000000000000000000100010000003000008000000000000000000000000000000100000000004800000058400000740200000000000000000000740234000000560053005F00560045005200530049004F004E005F0049004E0046004F0000000000BD04EFFE00000100000000000000000000000000000000003F000000000000000400000002000000000000000000000000000000440000000100560061007200460069006C00650049006E0066006F00000000002400040000005400720061006E0073006C006100740069006F006E00000000000000B004D4010000010053007400720069006E006700460069006C00650049006E0066006F000000B001000001003000300030003000300034006200300000002C0002000100460069006C0065004400650073006300720069007000740069006F006E000000000020000000300008000100460069006C006500560065007200730069006F006E000000000030002E0030002E0030002E003000000050001800010049006E007400650072006E0061006C004E0061006D006500000032003000310031002D00300033002D00310032002D00310039002D00300030002D00330034002E0044004C004C0000002800020001004C006500670061006C0043006F0070007900720069006700680074000000200000005800180001004F0072006900670069006E0061006C00460069006C0065006E0061006D006500000032003000310031002D00300033002D00310032002D00310039002D00300030002D00330034002E0044004C004C000000340008000100500072006F006400750063007400560065007200730069006F006E00000030002E0030002E0030002E003000000038000800010041007300730065006D0062006C0079002000560065007200730069006F006E00000030002E0030002E0030002E00300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000C000000D03500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", out discard)));
            _coreDb.Execute();
            _coreDb.ExecuteCommand.CommandText = "SELECT MAX(SelectorID) FROM Selector";
            int selectorID = Convert.ToInt32(_coreDb.ExecuteScalar());

            _coreDb.ExecuteCommand.CommandText = string.Format("INSERT INTO Selector(SelectorName, Description, Creator, Formula, CompileBin) VALUES({0}, {1}, {2}, {3}, {4})",
                OleDbStrHelper.getParamStr("selector2"),
                OleDbStrHelper.getParamStr("For unit test only"),
                OleDbStrHelper.getParamStr(SessionManager.MemberID),
                OleDbStrHelper.getParamStr("(3 + 2) > 0"),
                OleDbStrHelper.getParamStr(HexEncoding.GetBytesout discard)));
            _coreDb.Execute();
            #endregion

            #region filter
            _coreDb.ExecuteCommand.CommandText = "SELECT MIN(FilterID) FROM Filter";
            allStockFilterID = Convert.ToInt32(_coreDb.ExecuteScalar());

            _coreDb.ExecuteCommand.CommandText = string.Format("INSERT INTO Filter(FilterName, Description, Creator, IsPublic) VALUES({0}, {1}, {2}, {3})",
                OleDbStrHelper.getParamStr("filter name"),
                OleDbStrHelper.getParamStr("filter description"),
                OleDbStrHelper.getParamStr(SessionManager.MemberID),
                OleDbStrHelper.getParamStr(true));
            _coreDb.Execute();
            _coreDb.ExecuteCommand.CommandText = "SELECT MAX(FilterID) FROM Filter";
            filterID = Convert.ToInt32(_coreDb.ExecuteScalar());
            #endregion

            #region filter to selectors
            _coreDb.ExecuteCommand.CommandText = string.Format("INSERT INTO Filter2Selector(FilterID, SelectorID) VALUES({0}, {1})",
                OleDbStrHelper.getParamStr(filterID),
                OleDbStrHelper.getParamStr(selectorID));
            _coreDb.Execute();

            _coreDb.ExecuteCommand.CommandText = string.Format("INSERT INTO Filter2Selector(FilterID, SelectorID) VALUES({0}, {1})",
                OleDbStrHelper.getParamStr(filterID),
                OleDbStrHelper.getParamStr(selectorID + 1));
            _coreDb.Execute();
            #endregion

            #region filter relation
            _coreDb.ExecuteCommand.CommandText = string.Format("INSERT INTO FilterRelation(FilterID, SrcFilterID) VALUES({0}, {1})",
                OleDbStrHelper.getParamStr(filterID),
                OleDbStrHelper.getParamStr(allStockFilterID));
            _coreDb.Execute();
            #endregion

            #region robot
            _coreDb.ExecuteCommand.CommandText = string.Format("INSERT INTO Robot(RobotName, Creator, Description, IsPublic) VALUES({0}, {1}, {2}, {3})",
                OleDbStrHelper.getParamStr("POCRobot"),
                OleDbStrHelper.getParamStr(SessionManager.MemberID),
                OleDbStrHelper.getParamStr("POC Robot Desc"),
                OleDbStrHelper.getParamStr(true));
            _coreDb.Execute();
            _coreDb.ExecuteCommand.CommandText = "SELECT MAX(RobotID) FROM Robot";
            robotID = Convert.ToInt32(_coreDb.ExecuteScalar());
            #endregion

            #region robot to arms
            _coreDb.ExecuteCommand.CommandText = string.Format("INSERT INTO Arm(ArmName, RobotID, Description, Strategy, Threshold) VALUES({0}, {1}, {2}, {3}, {4})",
                OleDbStrHelper.getParamStr("Arm1"),
                OleDbStrHelper.getParamStr(robotID),
                OleDbStrHelper.getParamStr("Sell Arm"),
                OleDbStrHelper.getParamStr((short)StrategyEnum.Sell),
                OleDbStrHelper.getParamStr(10));
            _coreDb.Execute();
            _coreDb.ExecuteCommand.CommandText = "SELECT MAX(ArmID) FROM Arm";
            int armID = Convert.ToInt32(_coreDb.ExecuteScalar());

            _coreDb.ExecuteCommand.CommandText = string.Format("INSERT INTO Arm(ArmName, RobotID, Description, Strategy, Threshold) VALUES({0}, {1}, {2}, {3}, {4})",
                OleDbStrHelper.getParamStr("Arm2"),
                OleDbStrHelper.getParamStr(robotID),
                OleDbStrHelper.getParamStr("Buy Arm"),
                OleDbStrHelper.getParamStr((short)StrategyEnum.Buy),
                OleDbStrHelper.getParamStr(1));
            _coreDb.Execute();
            #endregion

            #region arms to filter
            _coreDb.ExecuteCommand.CommandText = string.Format("INSERT INTO Arm2Filter(ArmID, FilterID, Weight) VALUES({0}, {1}, {2})",
                OleDbStrHelper.getParamStr(armID),
                OleDbStrHelper.getParamStr(allStockFilterID),
                OleDbStrHelper.getParamStr(7));
            _coreDb.Execute();

            _coreDb.ExecuteCommand.CommandText = string.Format("INSERT INTO Arm2Filter(ArmID, FilterID, Weight) VALUES({0}, {1}, {2})",
                OleDbStrHelper.getParamStr(armID),
                OleDbStrHelper.getParamStr(filterID),
                OleDbStrHelper.getParamStr(5));
            _coreDb.Execute();

            _coreDb.ExecuteCommand.CommandText = string.Format("INSERT INTO Arm2Filter(ArmID, FilterID, Weight) VALUES({0}, {1}, {2})",
                OleDbStrHelper.getParamStr(armID + 1),
                OleDbStrHelper.getParamStr(allStockFilterID),
                OleDbStrHelper.getParamStr(7));
            _coreDb.Execute();
            #endregion

            #region repository
            _transDb.ExecuteCommand.CommandText = string.Format("INSERT INTO Repositories(UserID, RobotID, IsRobot, CashBalance) VALUES({0}, {1}, {2}, {3})",
                OleDbStrHelper.getParamStr(0),
                OleDbStrHelper.getParamStr(robotID),
                OleDbStrHelper.getParamStr(true),
                OleDbStrHelper.getParamStr(new decimal(500000)));
            _transDb.Execute();
            _transDb.ExecuteCommand.CommandText = "SELECT MAX(RepositoryID) FROM Repositories";
            int repositoryID = Convert.ToInt32(_transDb.ExecuteScalar());
            #endregion

            #region trader
            _transDb.ExecuteCommand.CommandText = string.Format("INSERT INTO Traders(RepositoryID, RobotID) VALUES({0}, {1})",
                OleDbStrHelper.getParamStr(repositoryID),
                OleDbStrHelper.getParamStr(robotID));
            _transDb.Execute();
            #endregion
        }
    }
}
